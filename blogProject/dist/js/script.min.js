let blogList = [
    {
        number: 0,
        userPublicated: 'Andrii Dmytruk',
        topic: 'Спорт',
        title: 'Лучшая украинская теннисистка.',
        time: '2019-02-6 00:20:18',
        like: 0,
        coments: [{
            id: 0,
            user: 'Andrii',
            page: 'Хорошая статья'
        }],
        page: 'Лучшая украинская теннисистка Элина Свитолина (№5 WTA) начала новый сезон с поражения на хардовом Премьере в Брисбене.'
    },
    {   
        number: 1,
        userPublicated: 'Oleg Dmytruk',
        topic: 'Спорт',
        title: 'МЧМ по хоккею.',
        time: '2019-12-21 00:20:18',
        like: 0,
        coments: [{
            id: 0,
            user: 'Serhii',
            page: 'Мне не очень зашла!'
        }],
        page: 'В финале Канада в напряженном матче обыграла Россию, хотя североамериканская сборная по ходу встречи проигрывала 0:1 и 1:3, однако сделала камбэк.'
    },
    {
        number: 2,
        userPublicated: 'Anonim',
        topic: 'Путешествие',
        title: 'Виды на Бали',
        time: '2019-11-28 01:20:18',
        like: 0,
        coments: [
        {
            id: 0,
            user: 'Andrii',
            page: 'Хорошая статья'
        }],
        page: 'Лучшее место для жини!'
    },
    {
        number: 3,
        userPublicated: 'Leonid',
        topic: 'Путешествие',
        title: 'Лучшее где я был',
        time: '2018-10-14 01:20:18',
        like: 0,
        coments: [
        {
            id: 0,
            user: 'Andrii',
            page: 'Хорошая статья'
        }],
        page: 'Places'
    },
    {
        number: 4,
        userPublicated: 'Albert Petrov',
        topic: 'Музыка',
        title: 'Смоки Мо представит «Стейкхаус»',
        time: '2019-03-31 02:20:18',
        like: 0,
        coments: [],
        page: 'Концерт Смоки Мо состоится 4 апреля 2020 года в «Известия Hall». Рэпер представит композиции со своего недавнего альбома «Стейкхаус», а также лучшие песни с предыдущих восьми пластинок.'
    },
        {
        number: 5,
        userPublicated: 'Leonid',
        topic: 'Путешествие',
        title: 'Л',
        time: '2018-10-14 01:20:18',
        like: 0,
        coments: [],
        page: 'Places'
    },
    {
        number: 6,
        userPublicated: 'Albert Petrov',
        topic: 'Музыка',
        title: 'С»',
        time: '2019-03-31 02:20:18',
        like: 0,
        coments: [],
        page: 'Концерт Смоки Мо состоится 4 апреля 2020 года в «Известия Hall». Рэпер представит композиции со своего недавнего альбома «Стейкхаус», а также лучшие песни с предыдущих восьми пластинок.'
    }
];
// localStorage.clear();LogOn
localStorage.setItem('blogList', JSON.stringify(blogList));
let a = JSON.parse(localStorage.getItem('blogList'));
/*Btn Active*/
function btnActive() {
    let indexSelect = document.getElementById( 'add-article__select_heading' ).options.selectedIndex,
        select = document.getElementById( 'add-article__select_heading' )
                    .options[indexSelect].value,
        btnPush = document.getElementById( 'push_article' ),
        newTitle = document.getElementById( 'add-article__title' ).value,
        newPage = document.getElementById( 'add-article__page' ).value;
        newTitle.onchange = (e) => console.log(e.target.value) ;
    return newTitle !== '' && newPage !== '' ? btnPush.disabled = false : btnPush.disabled = true;
};
document.getElementById( 'add-article__select_heading' ).onchange= () => btnActive();
/*Change value*/
function getValueSelect( id ) {
    const indexSelect = document.getElementById( id ).options.selectedIndex;
    const select = document.getElementById( id );
    const value = select.options[ indexSelect ].text;
    return value;
};

document.getElementById( 'select_heading' ).addEventListener('change',e => {
    e.preventDefault();
    let new_arr_heading = filterVal( getValueSelect( e.target.id ),blogList );
    if ( getValueSelect( e.target.id ) == 'Выберите жанр' ) {
        renderList( blogList.slice( 0, 2 ), result, userLogged );
        pagination( blogList, userLogged );
        liker( blogList.slice( 0, 2 ), userLogged );
        comentator( blogList.slice( 0, 2 ), userLogged );
        deleteComent( blogList.slice(0, 2), userLogged );
    } else {
        renderList( new_arr_heading, result, userLogged );
        pagination( new_arr_heading, userLogged );
        liker( new_arr_heading, userLogged );
        comentator( new_arr_heading, userLogged );
        deleteComent( new_arr_heading, userLogged );
    }
});

document.getElementById( 'select_time' ).addEventListener( 'change', e => {
    e.preventDefault();
    const indexSelect = document.getElementById( 'select_heading' );
    const new_arr_time = filterVal( getValueSelect( indexSelect.id ), blogList );

    if ( getValueSelect( indexSelect.id ) == 'Выберите жанр' ) {
        sortTime( blogList, getValueSelect( e.target.id ) );
        renderList( blogList.slice( 0, 2 ),result, userLogged );
        pagination( blogList, userLogged );
        liker( blogList.slice( 0, 2 ), userLogged );
        comentator( blogList.slice( 0, 2 ), userLogged );
        deleteComent( blogList.slice( 0, 2 ), userLogged );
    } else {
        sortTime( new_arr_time, getValueSelect( e.target.id ) );
        renderList( new_arr_time, result ,userLogged );
        pagination( new_arr_time, userLogged )
        liker( new_arr_time, userLogged );
        comentator( new_arr_time, userLogged );
        deleteComent( new_arr_time, userLogged );
    }
});
/*Add Coments*/
function comentator( list, user) {
    let article = [...document.getElementById( 'result' )
        .getElementsByTagName( 'textarea' )];
    let comentBtn = [...document.getElementById( 'result' )
        .getElementsByClassName( 'coment-block__btn' )];
    
    comentBtn.forEach( (el, index) => {
        el.addEventListener('click', e => {
            e.preventDefault();
            if (article[index].value == '') {
                alert('Перед отправкой заполните поле коментария!')
            } else {console.log(blogList)
                for (var i = 0; i < list.length; i++) {
                    if (Number(e.target.name) == list[i].number) {
                        let obj = {
                            'id': list[i]['coments'].length,
                            'user': user,
                            'page': article[i].value,
                        }
                        list[i]['coments'].push(obj);
                        renderList( list,result, user );
                        liker(list, user);
                        comentator(list, user);
                        deleteComent(list, user);
                    };
                };
            };
        });
    });
};
/*Create coment block*/
function createBlogBlock( list, el, user ) {
    list.forEach(obj =>{
    let new_block = document.createElement( 'div' ),
        time = document.createElement( 'p' ),
        linkWriter = document.createElement( 'a' ),
        title = document.createElement( 'h2' ),
        page = document.createElement( 'p' ),
        like = document.createElement( 'span' ),
        sentBlock = document.createElement( 'div' ),
        coment = document.createElement( 'div' ),
        link = document.createElement( 'a' ),
        forComent = document.createElement( 'textarea' ),
        btnComent = document.createElement( 'button' );
        new_block.className = 'result__render-article'
        time.className = 'time'
        like.className = obj.number;
        page.className = 'article'
        coment.className = 'coment-block';
        btnComent.className = 'coment-block__btn';
        forComent.name = obj.number;
        btnComent.name = obj.number;
        new_block.appendChild( title );
        new_block.appendChild(linkWriter);
        new_block.appendChild( time );
        new_block.appendChild( page );
        new_block.appendChild( like );
        new_block.appendChild( sentBlock );
        new_block.appendChild( coment );
        coment.appendChild( link );
        coment.appendChild( forComent );
        coment.appendChild( btnComent );
        linkWriter.innerHTML = obj.userPublicated;
        time.innerHTML = obj.time;
        title.innerHTML = obj.title;
        page.innerText = obj.page;
        link.innerHTML = user;
        like.innerText = obj.like;
        btnComent.innerHTML = 'Прокоментировать';
        el.appendChild( new_block );
        createComentBlock( obj, user, coment )
    });
};

function createComentBlock( obj, user, block ) {
    obj.coments.forEach( ( el,i ) => {
            listComent = document.createElement( 'div' );
            linkUser = document.createElement( 'a' );
            sentComent = document.createElement( 'p' );
            delComent = document.createElement( 'p' );
            listComent.className = 'coment-block__coment-user';
            delComent.className = obj.number;
            delComent.id = obj.coments[i].id;
            listComent.appendChild(linkUser);
            listComent.appendChild(sentComent);
            listComent.appendChild( delComent );
            block.appendChild( listComent );
            linkUser.innerHTML = el.user;
            sentComent.innerHTML = el.page;
            delComent.innerHTML = 'Del';

    });
};
/*Delete coments*/
function deleteComent( arr, user ) {
    const delElements = [...document.querySelectorAll('div.coment-block__coment-user > p:last-child')];
    let target,
        blogIndex,
        targetId;

    delElements.forEach( el => {
        el.onclick = ( e ) => {
            target = Number( e.target.className );
            blogIndex = blogList.findIndex( el => el.number == target );
            targetId = blogList[ target ].coments.findIndex( el => el.id == Number( e.target.id ) );
            blogList[ blogIndex ].coments.splice( targetId, 1 );
            renderList( arr, result, user);
            // pagination( arr, userLogged );
            comentator( arr, user );
            liker( arr, user );
            deleteComent( arr, user );
        };
    })
}
/*Filter blog*/
function filterVal( val,list ) {
    return list.filter( item => {
    if( item.topic.indexOf( val ) != -1 )
        return item;
    })
};
function regProcess( input, btn ) {
    const objUser = {};
    let boolean = false;
    const regBlock = document.getElementById('header-block__registration');
    btn.onclick = el => {
        if (input[0].value !== '' && input[1].value !== '' && input[3].value !== '' && boolean == false) {
            for( let i = 0; i < localStorage.length; i++) {
                if (localStorage.key(i) == input[0].value) {
                    boolean = true;
                    alert('Вы уже зарегистрированы');
                }
                if (localStorage.key(i) == '') {
                    localStorage.removeItem('');
                } 
            }
        if (boolean == false && input[1].value == input[2].value) {
                input.forEach(el => objUser[el.className] = el.value);
                localStorage.setItem(input[0].value, JSON.stringify(objUser));
                alert('Вы успешно зарегистрированы!');
                regBlock.style.display = 'none';
        } else {
            alert( 'Поля паролей не совпадают' );
        }
        input.forEach(el => el.value = '');
        } else {
            input.forEach(el => el.value == '' ? el.placeholder = 'Некоректное заполнение' : el.value);
        }
    }
};

function signIn( button, input, signBlock, regBlock ) {
    let boolean = false;
    let objPars;
    button.onclick = () => {
        if ( input[ 0 ].value !== '' && input[ 1 ].value !== '' && boolean == false ) {
            for( let i = 0; i < localStorage.length; i++ ) {
                objPars = JSON.parse( localStorage[ localStorage.key( i ) ] );
                if ( localStorage.key( i ) == input[ 0 ].value && objPars.pass == input[ 1 ].value ) {
                    boolean = true;
                    userLogged = localStorage.key( i );
                    signBlock.style.display = 'none';
                    localStorage.setItem( 'LogOn', JSON.stringify( userLogged ) );
                    stateStatus ( true, userLogged );
                }
            }
            if ( boolean == false ) {
                alert('Пользователь не зарегистрирован')
                regBlock.style.display = 'block';
                signBlock.style.display = 'none';
            }
            input.forEach( el => el.value = '' );
        } else {
            input.forEach( el => el.value == '' ? el.placeholder = 'Заполните поле' : el.value );
        }
    }
};
/*Change status*/
function stateStatus (state = false, user = 'Anonim') {
	const userName = document.getElementsByClassName('header-block__user-name')[0];
	const btnLogoBlock = [...document.getElementById('header-block__logo')
		.getElementsByTagName('button')];
	const main = document.querySelector('main');
    if (state == true) {
    	btnLogoBlock[2].style.display = 'block';
    	btnLogoBlock[0].style.display = 'none';
    	btnLogoBlock[1].style.display = 'none';
    	userName.innerHTML = user;
    	userName.style.display = 'block';
    	userName.style.top = '5px';
    	userName.style.transition = '1.2s'
        main.style.display = 'block';
        registration();
        pagination(blogList, user);
        renderList( blogList.slice(0, 2), result, user );
        comentator(blogList.slice(0, 2), user);
        liker(blogList.slice(0, 2), user);
        deleteComent(blogList.slice(0, 2), user );
    } else {
        userName.innerHTML = '';
        // userName.style.display = 'none';
        main.style.display = 'none';
    }
};
/*Likes counter*/
function liker( list, user ) {
    let resultBlock = [...document.getElementById( 'result' ).getElementsByTagName( 'span' )]
        .forEach( el => {
            el.addEventListener('click', e => {
            e.preventDefault();
            for (var i = 0; i < list.length; i++) {
                if (Number(el.className) == list[i].number) {
                    list[i].like++;
                    renderList( list, result, user);
                    liker(list, user);
                    comentator(list, user);
                };
            };
        });
    });
};
/*LogOff*/
function logOff() {
    const btnLogoBlock = [ ...document.getElementById( 'header-block__logo' )
        .getElementsByTagName('button')];
    btnLogoBlock[2].onclick = (e) => {
        localStorage.removeItem( 'LogOn' );
        btnLogoBlock[2].style.display = 'none';
        btnLogoBlock[0].style.display = 'block';
        btnLogoBlock[1].style.display = 'block';
        stateStatus( false );
        localStorage.setItem('LogOn', JSON.stringify(null));
    }
};logOff();

let userLogged = localStorage.getItem('LogOn') !== 'null' ? localStorage.getItem('LogOn').replace(/\"/g, "") : 'Anonim';


if(localStorage.getItem('LogOn') !== 'null') {
    let userFromLocal = localStorage.getItem('LogOn', JSON.stringify(userLogged));
    stateStatus(true, userFromLocal.replace(/\"/g, ""));
} else {
    localStorage.setItem('LogOn', JSON.stringify(null));
};

setTimeout(() => {
    const logo = document.getElementById('header-block__logo')
        .getElementsByTagName('a');
    logo[0].style.left = '5%';
    logo[0].style.transition = '1.2s';
    logo[0].style.transform = 'rotate(0deg)';
}, 1000);

(() => {
    let bol = true;
    const menuBtn = document.getElementsByClassName('header-block__menue-button')[0];
    menuBtn.onclick = function () {
        if (bol == true) {
            document.getElementsByClassName('header-block__nav-menu-480-320')[0].style.display = 'block';
            bol = false;
        } else {
            document.getElementsByClassName('header-block__nav-menu-480-320')[0].style.display = 'none';
            bol = true;
        }
    }
})();

/* Pagination*/
function pagination(obj, user) {
    let i = 1;
    let startPage = 0;
    let pugNum;
    let arrLink;
    const pageSize = Math.ceil(obj.length/2+1);
    const mainBlock = document.querySelector('main');
    const pugBlock = document.getElementById( 'pagination-block' );
          pugBlock.innerHTML = '';

    while( i < pageSize ) {
        pugNum = document.createElement( 'a' );
        pugNum.innerHTML = i;
        pugBlock.appendChild( pugNum );
        i++;
    };
    if (startPage == 0) {
        renderList(obj.slice(startPage, startPage+2) ,result, user);
    }
    arrLink = [ ...pugBlock.querySelectorAll( 'a' ) ];

    arrLink.forEach( link => {
        link.addEventListener( 'click', e => {
            e.preventDefault();
            startPage = Number( e.target.text );
            renderList( obj.slice( startPage*2-2, startPage*2 ), result, user );
            liker( obj.slice( startPage*2-2, startPage*2 ), user );
            comentator( obj.slice( startPage*2-2, startPage*2 ), user );
            deleteComent( obj.slice( startPage*2-2, startPage*2 ), user );
        });
    });
};
/*Add new article*/
function publickArticle(user) {console.log(user)
    const pushBtn = document.getElementById( 'push_article' ),
        newTitle = document.getElementById( 'add-article__title' ),
        newPage = document.getElementById( 'add-article__page' ),
        selectValue = document.getElementById( 'select_heading' ),
        indexSelect = document.getElementById( 'add-article__select_heading' ).options.selectedIndex,
        select = document.getElementById( 'add-article__select_heading' );
    const newArticle = {
        'number': blogList.length,
        'userPublicated': user,
        'topic': select.options[indexSelect].text,
        'title': newTitle.value,
        'time': new Date().getFullYear() + '-' + new Date().getMonth()+1 + '-' + new Date().getDate()+ ' ' + new Date().getHours() + ':' + new Date().getMinutes()+ ':' + new Date().getSeconds(),
        'like': 0,
        'coments': [],
        'page': newPage.value,
    };
    blogList.unshift(newArticle);
    let addInTopic = filterVal( getValueSelect(selectValue.id),blogList );
    if (newArticle['topic'] == getValueSelect(selectValue.id)) {
        renderList( addInTopic, result, user );
        pagination(addInTopic, user);
        liker(addInTopic, user);
        comentator(addInTopic, user);
        deleteComent( addInTopic, user )
    } else if (getValueSelect(selectValue.id) == 'Выберите жанр') {
        renderList( blogList,result, user );
        pagination(blogList, user);
        liker(blogList.slice(0, 2), user);
        comentator(blogList.slice(0, 2), user);
        deleteComent( blogList.slice(0, 2), user )
    };

    newTitle.value = '';
    newPage.value = '';
    pushBtn.setAttribute('disabled', 'disabled')
};
document.getElementById( 'push_article' ).onclick = () => publickArticle(userLogged);
/*Edit coments*/
function editComent( obj, user ) {
	const createElements = [...document.querySelectorAll('div.coment-block__coment-user')];
	const innerElements = [...document.querySelectorAll('.coment-block__coment-user > p:nth-child(2)')];
	const pageClass = [...document.querySelectorAll('.coment-block__coment-user > p:last-child')];
	let inputRefresh;
    let inpuCreate;
    let target;

    innerElements.forEach( (el,i) => {
        el.onclick = (e) => {
        	inputRefresh = document.createElement('button');
        	inpuCreate = document.createElement('input');
        	inpuCreate.className = pageClass[i].className
        	inpuCreate.id = pageClass[i].id
        	inpuCreate.setAttribute('type', 'text')
        	inpuCreate.value = innerElements[i].innerHTML;
        	inputRefresh.innerText = 'Refresh';
	    	createElements[i].appendChild(inpuCreate);
	    	createElements[i].appendChild(inputRefresh)
            target = e.target;
            inputRefresh.onclick = () => {
            	if (inpuCreate.className == pageClass[i].className) {
	                blogList[inpuCreate.className].coments[inpuCreate.id]['page'] = inpuCreate.value;
	                console.log(blogList);
	                inputRefresh.style.display = 'none';
      				inpuCreate.style.display = 'none';
	                renderList( obj, result, user);
	                // comentator(arr, user);
	                // liker(arr, user);
	                editComent(blogList.slice(0,2), user);
            	}
            }
        };
    })
}

editComent(blogList.slice(0,2), userLogged);
/*Registration*/
// localStorage.clear();
function registration() {
    const logoBtn = [...document.getElementById('header-block__logo')
        .getElementsByTagName('button')];
    const regBlock = document.getElementById('header-block__registration');
    const regBtn = regBlock.querySelector('button');
    const signBlock = document.getElementById('header-block__sign');
    const signBtn = signBlock.querySelector('button');
    const regInput = [...document.getElementById('header-block__registration')
        .getElementsByTagName('input')];
    const signInput = [...document.getElementById('header-block__sign')
        .getElementsByTagName('input')];

    logoBtn[1].onclick = () => {
        signBlock.style.display = 'none';
        regBlock.style.display = 'block';
    }
    logoBtn[0].onclick = () => {
        signBlock.style.display = 'block';
        regBlock.style.display = 'none';
    }

    regProcess(regInput, regBtn);
    signIn(signBtn, signInput, signBlock, regBlock);
}; 
registration();
/*Render blog*/
// const result  = document.getElementById( 'result' );
function renderList( list, el, user ){
    el.innerHTML='';
    createBlogBlock( list, el, user )
};
/* Search on site*/
document.querySelector('#search').oninput = function () {
    let val = this.value.trim();
    let elasticI = document.body.innerText;
    let elasticItems = [...document.querySelectorAll('body p'),
         ...document.querySelectorAll('body h2'),
         ...document.querySelectorAll('body span')];

    if (val != '') {
        elasticItems.forEach(function (elem) {
            console.log(elem.innerText.toString(), val);
            if (elem.innerText.search(val) == -1) {
                elem.innerHTML = elem.innerText;
            }
            else {
                let str = elem.innerText;
                elem.innerHTML = insertMark(str, elem.innerText.search(val), val.length);
            }    
        });
    }
    else {
        elasticItems.forEach(function (elem) {
            elem.innerHTML = elem.innerText;
        });
    }
}

function insertMark(string, pos, len) {
    return string.slice(0, pos) + '<mark>' + string.slice(pos, pos + len) + '</mark>' + string.slice(pos + len);
}
/*Sort time*/
function sortTime( list, time ) {
    if ( time == 'Самые новые' ) {
        return list.sort( ( a,b ) => new Date( b.time ).getTime() - new Date( a.time ).getTime() );
    } else if ( time == 'Давно написанные' ) {
        return list.sort( ( a,b ) => new Date( a.time ).getTime() - new Date( b.time ).getTime())
    } else if ( time == 'Популярные') {
        return list.sort( ( a,b ) => b.like - a.like );
    } else if ( time == 'Непопулярные' ) {
        return list.sort( (a,b) => a.like - b.like );
    }
};