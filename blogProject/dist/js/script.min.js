let blogList = [
    {
        number: 0,
        userPublicated: 'Andrii Dmytruk',
        topic: 'Спорт',
        title: 'Лучшая украинская теннисистка.',
        time: '2019-02-6 00:20:18',
        like: 0,
        coments: [{
            id: 0,
            user: 'Andrii',
            page: 'Хорошая статья'
        }],
        page: 'Лучшая украинская теннисистка Элина Свитолина (№5 WTA) начала новый сезон с поражения на хардовом Премьере в Брисбене.'
    },
    {   
        number: 1,
        userPublicated: 'Oleg Dmytruk',
        topic: 'Спорт',
        title: 'МЧМ по хоккею.',
        time: '2019-12-21 00:20:18',
        like: 0,
        coments: [{
            id: 0,
            user: 'Serhii',
            page: 'Мне не очень зашла!'
        }],
        page: 'В финале Канада в напряженном матче обыграла Россию, хотя североамериканская сборная по ходу встречи проигрывала 0:1 и 1:3, однако сделала камбэк.'
    },
    {
        number: 2,
        userPublicated: 'Anonim',
        topic: 'Путешествие',
        title: 'Виды на Бали',
        time: '2019-11-28 01:20:18',
        like: 0,
        coments: [],
        page: 'Лучшее место для жини!'
    },
    {
        number: 3,
        userPublicated: 'Leonid',
        topic: 'Путешествие',
        title: 'Лучшее где я был',
        time: '2018-10-14 01:20:18',
        like: 0,
        coments: [],
        page: 'Places'
    },
    {
        number: 4,
        userPublicated: 'Albert Petrov',
        topic: 'Музыка',
        title: 'Смоки Мо представит «Стейкхаус»',
        time: '2019-03-31 02:20:18',
        like: 0,
        coments: [],
        page: 'Концерт Смоки Мо состоится 4 апреля 2020 года в «Известия Hall». Рэпер представит композиции со своего недавнего альбома «Стейкхаус», а также лучшие песни с предыдущих восьми пластинок.'
    },
        {
        number: 5,
        userPublicated: 'Leonid',
        topic: 'Путешествие',
        title: 'Л',
        time: '2018-10-14 01:20:18',
        like: 0,
        coments: [],
        page: 'Places'
    },
    {
        number: 6,
        userPublicated: 'Albert Petrov',
        topic: 'Музыка',
        title: 'С»',
        time: '2019-03-31 02:20:18',
        like: 0,
        coments: [],
        page: 'Концерт Смоки Мо состоится 4 апреля 2020 года в «Известия Hall». Рэпер представит композиции со своего недавнего альбома «Стейкхаус», а также лучшие песни с предыдущих восьми пластинок.'
    }
];

/*Btn Active*/
function btnActive() {
    let indexSelect = document.getElementById( 'add-article__select_heading' ).options.selectedIndex,
        select = document.getElementById( 'add-article__select_heading' )
                    .options[indexSelect].value,
        btnPush = document.getElementById( 'push_article' ),
        newTitle = document.getElementById( 'add-article__title' ).value,
        newPage = document.getElementById( 'add-article__page' ).value;
        newTitle.onchange = (e) => console.log(e.target.value) ;
    return newTitle !== '' && newPage !== '' ? btnPush.disabled = false : btnPush.disabled = true;
};
document.getElementById( 'add-article__select_heading' ).onchange= () => btnActive();
/*Change value*/
function getValueSelect( id ) {
    let indexSelect = document.getElementById( id ).options.selectedIndex;
    let select = document.getElementById( id );
    let value = select.options[indexSelect].text;
    return value;
};

document.getElementById( 'select_heading' ).addEventListener('change',e => {
    e.preventDefault();
    let new_arr_heading = filterVal( getValueSelect(e.target.id),blogList );
    if (getValueSelect(e.target.id) == 'Выберите жанр') {
        pagination(blogList, userLogged);
        renderList( blogList.slice(0, 2), result, userLogged);  
        liker(blogList.slice(0, 2), userLogged);
        comentator(blogList.slice(0, 2), userLogged);
    } else {
        pagination(new_arr_heading, userLogged);
        renderList( new_arr_heading, result, userLogged);
        liker(new_arr_heading, userLogged);
        comentator(new_arr_heading, userLogged);
    }
});

document.getElementById( 'select_time' ).addEventListener('change',e => {
    e.preventDefault();
    let indexSelect = document.getElementById( 'select_heading' );
    let new_arr_time = filterVal( getValueSelect(indexSelect.id), blogList );

    if (getValueSelect(indexSelect.id) == 'Выберите жанр') {
        sortTime(blogList, getValueSelect(e.target.id));
        pagination(blogList, userLogged);
        renderList( blogList.slice(0, 2),result, userLogged );
        liker(blogList.slice(0, 2), userLogged);
        comentator(blogList.slice(0, 2), userLogged);
    } else {
        sortTime(new_arr_time, getValueSelect(e.target.id));
        pagination(new_arr_time, userLogged)
        renderList( new_arr_time, result ,userLogged);
        liker(new_arr_time, userLogged);
        comentator(new_arr_time, userLogged);
    }
});
/*Add Coments*/
function comentator( list, user) {
    let article = [...document.getElementById( 'result' )
        .getElementsByTagName( 'textarea' )];
    let comentBtn = [...document.getElementById( 'result' )
        .getElementsByClassName( 'coment-block__btn' )];
    
    comentBtn.forEach( (el, index) => {
        el.addEventListener('click', e => {
            e.preventDefault();
            if (article[index].value == '') {
                alert('Перед отправкой заполните поле коментария!')
            } else {console.log(blogList)
                for (var i = 0; i < list.length; i++) {
                    if (Number(e.target.name) == list[i].number) {
                        let obj = {
                            'id': list[i]['coments'].length,
                            'user': user,
                            'page': article[i].value
                        }
                        list[i]['coments'].push(obj);
                        renderList( list,result, user );
                        liker(list, user);
                        comentator(list, user);
                    };
                };
            };
        });
    });
};
/*Delete coments*/
function deleteComent(arr, num) {
	const delElements = Array.from(document.getElementsByClassName('coment-block__delet'));
	// console.log(delElements)
    // arr.filter( el => el.number );
    delElements.forEach( (el,i) => {
    	// console.log('l')
    	el.addEventListener('click', e => {
        	e.preventDefault();
        	// console.log(e.target)

    	});
    })
}
/*Filter blog*/
function filterVal( val,list ) {
    return list.filter( item => {
    if( item.topic.indexOf( val ) != -1 )
        return item;
    })
};
/*Change status*/
function stateStatus (state = false, user = 'Anonim') {
	let userName = document.getElementsByClassName('header-block__user-name')[0];
	let btnLogoBlock = [...document.getElementById('header-block__logo')
		.getElementsByTagName('button')];
	let main = document.querySelector('main');
    if (state == true) {
    	// btnLogoBlock[2].style.display = 'block';
    	// btnLogoBlock[0].style.display = 'none';
    	// btnLogoBlock[1].style.display = 'none';
    	userName.innerHTML = user;
    	userName.style.display = 'block';
    	userName.style.top = '5px';
    	userName.style.transition = '1.2s'
        main.style.display = 'block';
        deleteComent();
        pagination(blogList, user);
        renderList( blogList.slice(0, 2), result, user );
        comentator(blogList.slice(0, 2), user);
        liker(blogList.slice(0, 2), user);
    }
};
/*Likes counter*/
function liker( list, user ) {
    let resultBlock = [...document.getElementById( 'result' ).getElementsByTagName( 'span' )]
        .forEach( el => {
            el.addEventListener('click', e => {
            e.preventDefault();
            for (var i = 0; i < list.length; i++) {
                if (Number(el.className) == list[i].number) {
                    list[i].like++;
                    renderList( list, result, user);
                    // pagination(pagination(blogList, user));
                    liker(list, user);
                    comentator(list, user);
                };
            };
        });
    });
};
/*LogOff*/
// (function logOff() {console.log('sdc')
//     let btnLogoBlock = [...document.getElementById('header-block__logo')
//         .getElementsByTagName('button')];
//     btnLogoBlock[2].onclick = () => {
//         localStorage.removeItem('LogOn');
//         stateStatus (false, userLogged);
//         // btnLogoBlock[2].style.display = 'none';
//         // btnLogoBlock[0].style.display = 'block';
//         // btnLogoBlock[1].style.display = 'block';
//     }
// })();

let userLogged = localStorage.key('LogOn') !== null ? localStorage.getItem('LogOn').replace(/\"/g, "") :'Anonim';

// stateStatus();
// deleteComent();
// pagination(blogList, userLogged);
// renderList(blogList.slice(0, 2), result, userLogged );
// comentator(blogList, userLogged);
// liker(blogList, userLogged);

setTimeout(() => {
    const logo = document.getElementById('header-block__logo')
        .getElementsByTagName('a');
    logo[0].style.left = '5%';
    logo[0].style.transition = '1.2s';
    logo[0].style.transform = 'rotate(0deg)';
}, 1000);

(() => {
    let bol = true;
    const menuBtn = document.getElementsByClassName('header-block__menue-button')[0];
    menuBtn.onclick = function () {
        if (bol == true) {
            document.getElementsByClassName('header-block__nav-menu-480-320')[0].style.display = 'block';
            bol = false;
        } else {
            document.getElementsByClassName('header-block__nav-menu-480-320')[0].style.display = 'none';
            bol = true;
        }
    }
})();

/* Pagination*/
function pagination(obj, user) {
    let k = 1;
    let startPag = 0;
    let nextPag = 0;
    let pageSize = Math.ceil(obj.length/2+1),
        mainBlock = document.querySelector('main'),
        pugBlock = document.getElementById( 'pagination-block' );
        pugBlock.innerHTML = '';
    while(k < pageSize) {
        let pugNum = document.createElement( 'a' );
            pugNum.innerHTML = k;
            pugBlock.appendChild(pugNum);
            k++;
    };
    if (startPag == 0) {
            renderList(obj.slice(nextPag, nextPag+2) ,result, user);
            startPag = 1;
            nextPag = 2;
        }

    let arrLink = [...pugBlock.querySelectorAll('a')];
    arrLink.forEach( el => {
        el.addEventListener('click', e => {
            let target = Number(e.target.text);
            e.preventDefault();
            if (startPag < Number(e.target.text)) {
                renderList(obj.slice(nextPag, nextPag+2), result, user);
                liker(obj.slice(nextPag, nextPag+2), user);
                comentator(obj.slice(nextPag, nextPag+2), user);
                nextPag += 2;
                startPag = Number(e.target.text);
            } else if (startPag > Number(e.target.text)) {
                renderList(obj.slice(nextPag-4, nextPag-2) ,result, user);
                liker(obj.slice(nextPag-4, nextPag-2), user);
                comentator(obj.slice(nextPag-4, nextPag-2), user);
                nextPag -= 2;
                startPag = Number(e.target.text);
            }
        });
    });
};
/*Add new article*/
function publickArticle(user) {
    const pushBtn = document.getElementById( 'push_article' ),
        newTitle = document.getElementById( 'add-article__title' ),
        newPage = document.getElementById( 'add-article__page' ),
        selectValue = document.getElementById( 'select_heading' ),
        indexSelect = document.getElementById( 'add-article__select_heading' ).options.selectedIndex,
        select = document.getElementById( 'add-article__select_heading' );
    const newArticle = {
        'number': blogList.length,
        'topic': select.options[indexSelect].text,
        'title': newTitle.value,
        'time': new Date().getFullYear() + '-' + new Date().getMonth()+1 + '-' + new Date().getDate()+ ' ' + new Date().getHours() + ':' + new Date().getMinutes()+ ':' + new Date().getSeconds(),
        'like': 0,
        'coments': [],
        'page': newPage.value,
    };
    blogList.unshift(newArticle);
    let addInTopic = filterVal( getValueSelect(selectValue.id),blogList );
    if (newArticle['topic'] == getValueSelect(selectValue.id)) {
        pagination(addInTopic, user);
        renderList( addInTopic, result, user );
        liker(addInTopic, user);
        comentator(addInTopic, user);
    } else if (getValueSelect(selectValue.id) == 'Выберите жанр') {
        renderList( blogList,result, user );
        pagination(blogList, user);
        liker(blogList.slice(0, 2), user);
        comentator(blogList.slice(0, 2), user);
    };

    newTitle.value = '';
    newPage.value = '';
    pushBtn.setAttribute('disabled', 'disabled')
};
document.getElementById( 'push_article' ).onclick = () => publickArticle(userLogged);
/*Registration*/
// localStorage.clear();
function registration() {
    const objUser = {};
    const logoBtn = [...document.getElementById('header-block__logo')
        .getElementsByTagName('button')];
    const regBlock = document.getElementById('header-block__registration');
    const regBtn = regBlock.querySelector('button');
    const signBlock = document.getElementById('header-block__sign');
    const signBtn = signBlock.querySelector('button');
    const regInput = [...document.getElementById('header-block__registration')
        .getElementsByTagName('input')];
    const signInput = [...document.getElementById('header-block__sign')
        .getElementsByTagName('input')];
    let boolean = false;

    logoBtn[1].onclick = () => {
        signBlock.style.display = 'none';
        regBlock.style.display = 'block';
    }
    logoBtn[0].onclick = () => {
        signBlock.style.display = 'block';
        regBlock.style.display = 'none';
    }

    function regProcess(input) {
        regBtn.onclick = el => {
            if (input[0].value !== '' && input[1].value !== '' && input[3].value !== '' && boolean == false) {
                for( let i = 0; i < localStorage.length; i++) {
                    if (localStorage.key(i) == input[0].value) {
                        boolean = true;
                        alert('Вы уже зарегистрированы');
                    }
                    if (localStorage.key(i) == '') {
                        localStorage.removeItem('');
                    } 
                }
                if (boolean == false && input[1].value == input[2].value) {
                        input.forEach(el => objUser[el.className] = el.value);
                        localStorage.setItem(input[0].value, JSON.stringify(objUser));
                        alert('Вы успешно зарегистрированы!');
                        regBlock.style.display = 'none';
                } else {
                    alert('Поля паролей не совпадают');
                }
                input.forEach(el => el.value = '');
            } else {
                input.forEach(el => el.value == '' ? el.placeholder = 'Некоректное заполнение' : el.value);
            }
        }
    };regProcess(regInput);

    function signIn(button, input) {
        if(localStorage.key('LogOn') !== null) {
            let userFromLocal = localStorage.getItem('LogOn', JSON.stringify(userLogged));
            stateStatus(true, userFromLocal.replace(/\"/g, ""));
            // stateStatus(true, userFromLocal);
        }
       button.onclick = () => {
            if (input[0].value !== '' && input[1].value !== '' && boolean == false) {
                for( let i = 0; i < localStorage.length; i++) {
                    let objPars = JSON.parse(localStorage[localStorage.key(i)])['pass'];
                    if (localStorage.key(i) == input[0].value & objPars == input[1].value) {
                        boolean = true;
                        alert('Вход разрешен');
                        userLogged = localStorage.key(i);
                        signBlock.style.display = 'none';
                        localStorage.setItem('LogOn', JSON.stringify(userLogged));
                        stateStatus (true, userLogged);
                    }
                }
                if (boolean == false) {
                    alert('Пользователь не зарегистрирован')
                    regBlock.style.display = 'block';
                    signBlock.style.display = 'none';
                }
                input.forEach(el => el.value = '');
            } else {
                input.forEach(el => el.value == '' ? el.placeholder = 'Заполните поле' : el.value);
            }
        }

    };
    signIn(signBtn, signInput);
}; registration();
/*Render blog*/
// const result  = document.getElementById( 'result' );
function renderList( list, el, user ){
    el.innerHTML='';
    list.forEach(obj =>{
        let new_block = document.createElement( 'div' ),
            time = document.createElement( 'p' ),
            linkWriter = document.createElement( 'a' ),
            title = document.createElement( 'h2' ),
            page = document.createElement( 'p' ),
            like = document.createElement( 'span' ),
            sentBlock = document.createElement( 'div' ),
            coment = document.createElement( 'div' ),
            link = document.createElement( 'a' ),
            forComent = document.createElement( 'textarea' ),
            btnComent = document.createElement( 'button' );
        like.className = obj.number;
        coment.className = 'coment-block';
        btnComent.className = 'coment-block__btn';
        forComent.name = obj.number;
        btnComent.name = obj.number;
        new_block.appendChild(linkWriter);
        new_block.appendChild( title );
        new_block.appendChild( time );
        new_block.appendChild( page );
        new_block.appendChild( like );
        new_block.appendChild( sentBlock );
        new_block.appendChild( coment );
        coment.appendChild( link );
        coment.appendChild( forComent );
        coment.appendChild( btnComent );
        linkWriter.innerHTML = obj.userPublicated;
        time.innerHTML = obj.time;
        title.innerHTML = obj.title;
        page.innerText = obj.page;
        link.innerHTML = user;
        like.innerText = obj.like;
        obj.coments.forEach( (el,i) => {
            listComent = document.createElement( 'div' );
            linkUser = document.createElement( 'a' );
            sentComent = document.createElement( 'p' );
            delComent = document.createElement( 'span' );
            delComent.className = 'coment-block__delet';
            listComent.appendChild(linkUser);
            listComent.appendChild(sentComent);
            listComent.appendChild( delComent );
            coment.appendChild( listComent );
            linkUser.innerHTML = el.user;
            sentComent.innerHTML = el.page;
            delComent.innerHTML = 'Del';

        });
        btnComent.innerHTML = 'Прокоментировать';
        el.appendChild( new_block );
  });
};
/* Search on site*/
document.querySelector('#search').oninput = function () {
    let val = this.value.trim();
    let elasticI = document.body.innerText;
    let elasticItems = [...document.querySelectorAll('body p'),
         ...document.querySelectorAll('body h2'),
         ...document.querySelectorAll('body span')];

    if (val != '') {
        elasticItems.forEach(function (elem) {
            console.log(elem.innerText.toString(), val);
            if (elem.innerText.search(val) == -1) {
                elem.innerHTML = elem.innerText;
            }
            else {
                let str = elem.innerText;
                elem.innerHTML = insertMark(str, elem.innerText.search(val), val.length);
            }    
        });
    }
    else {
        elasticItems.forEach(function (elem) {
            elem.innerHTML = elem.innerText;
        });
    }
}

function insertMark(string, pos, len) {
    return string.slice(0, pos) + '<mark>' + string.slice(pos, pos + len) + '</mark>' + string.slice(pos + len);
}
/*Sort time*/
function sortTime( list, time ) {
    if ( time == 'Самые новые' ) {
        return list.sort( ( a,b ) => new Date( b.time ).getTime() - new Date( a.time ).getTime() );
    } else if ( time == 'Давно написанные' ) {
        return list.sort( ( a,b ) => new Date( a.time ).getTime() - new Date( b.time ).getTime())
    } else if ( time == 'Популярные') {
        return list.sort( ( a,b ) => b.like - a.like );
    } else if ( time == 'Непопулярные' ) {
        return list.sort( (a,b) => a.like - b.like );
    }
};