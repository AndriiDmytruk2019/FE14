/*Admin user*/
// function adminDelete( arr, user ) {
//     const delElements = [ ...document.querySelectorAll( 'div.coment-block__coment-user > p:last-child' ) ];
//     let target,
//         blogIndex,
//         targetId;

//     delElements.forEach( (el, i) => {
//         el.onclick = ( e ) => {
//             if ( blogList[ i ].coments[ e.target.id ].user == user ) {
//                 target = Number( e.target.className );
//                 blogIndex = blogList.findIndex( el => el.number == target );
//                 targetId = blogList[ target ].coments.findIndex( el => el.id == Number( e.target.id ) );
//                 blogList[ blogIndex ].coments.splice( targetId, 1 );
//                 localStorage.setItem('blogList', JSON.stringify(blogList));
//                 renderList( arr, result, user );
//             };
//         };
//     });
// };
/*Для хардкода масива*/
// let blogList = [
//     {
//         number: 0,
//         userPublicated: 'Andrii Dmytruk',
//         topic: 'Sport',
//         title: 'America mourns Kobe Bryant after death in helicopter crash.',
//         time: '2019-02-6 00:20:18',
//         like: 0,
//         coments: [{
//             id: 0,
//             user: 'Andrii',
//             page: 'Хорошая статья'
//         }],
//         page: 'Лучшая украинская теннисистка Элина Свитолина (№5 WTA) начала новый сезон с поражения на хардовом Премьере в Брисбене.'
//     },
//     {   
//         number: 1,
//         userPublicated: 'Oleg Dmytruk',
//         topic: 'Sport',
//         title: 'МЧМ по хоккею.',
//         time: '2019-12-21 00:20:18',
//         like: 0,
//         coments: [{
//             id: 0,
//             user: 'Serhii',
//             page: 'Мне не очень зашла!'
//         }],
//         page: 'В финале Канада в напряженном матче обыграла Россию, хотя североамериканская сборная по ходу встречи проигрывала 0:1 и 1:3, однако сделала камбэк.'
//     },
//     {
//         number: 2,
//         userPublicated: 'Anonim',
//         topic: 'Travelling',
//         title: 'Виды на Бали',
//         time: '2019-11-28 01:20:18',
//         like: 0,
//         coments: [
//         {
//             id: 0,
//             user: 'Andrii',
//             page: 'Хорошая статья'
//         }],
//         page: 'Лучшее место для жини!'
//     },
//     {
//         number: 3,
//         userPublicated: 'Leonid',
//         topic: 'Travelling',
//         title: 'Лучшее где я был',
//         time: '2018-10-14 01:20:18',
//         like: 0,
//         coments: [
//         {
//             id: 0,
//             user: 'Andrii',
//             page: 'Хорошая статья'
//         }],
//         page: 'Places'
//     },
//     {
//         number: 4,
//         userPublicated: 'Albert Petrov',
//         topic: 'Music',
//         title: 'Смоки Мо представит «Стейкхаус»',
//         time: '2019-03-31 02:20:18',
//         like: 0,
//         coments: [],
//         page: 'Концерт Смоки Мо состоится 4 апреля 2020 года в «Известия Hall». Рэпер представит композиции со своего недавнего альбома «Стейкхаус», а также лучшие песни с предыдущих восьми пластинок.'
//     },
//         {
//         number: 5,
//         userPublicated: 'Leonid',
//         topic: 'Travelling',
//         title: 'Л',
//         time: '2018-10-14 01:20:18',
//         like: 0,
//         coments: [],
//         page: 'Places'
//     },
//     {
//         number: 6,
//         userPublicated: 'Albert Petrov',
//         topic: 'Music',
//         title: 'С»',
//         time: '2019-03-31 02:20:18',
//         like: 0,
//         coments: [],
//         page: 'Концерт Смоки Мо состоится 4 апреля 2020 года в «Известия Hall». Рэпер представит композиции со своего недавнего альбома «Стейкхаус», а также лучшие песни с предыдущих восьми пластинок.'
//     }
// ];
// localStorage.clear();
// localStorage.setItem('LogOn', JSON.stringify('Admin'));
// localStorage.setItem('blogList', JSON.stringify(blogList));

let blogList = JSON.parse(localStorage.getItem('blogList'));
/*Btn Active*/
function btnActive() {
    let indexSelect = document.getElementById( 'add-article__select_heading' ).options.selectedIndex,
        select = document.getElementById( 'add-article__select_heading' ).options[ indexSelect ].value,
        btnPush = document.getElementById( 'push_article' ),
        newTitle = document.getElementById( 'add-article__title' ).value,
        newPage = document.getElementById( 'add-article__page' ).value;
    if (newTitle !== '' && newPage !== '') {
        btnPush.style.height = '35px'
        btnPush.style.fontSize = '11px'
        btnPush.style.transition = '1s'
    }
};
document.getElementById( 'add-article__select_heading' ).onchange= () => btnActive();
/*Button Hide*/
function btnHide() {
    const btnLogoBlock = [ ...document.querySelectorAll( 'div#header-block__logo > div > button' ) ];
    btnLogoBlock[ 2 ].style.display = 'block';
    btnLogoBlock[ 0 ].style.display = 'none';
    btnLogoBlock[ 1 ].style.display = 'none';
};
/*Change value*/
function getValueSelect( id ) {
    const indexSelect = document.getElementById( id ).options.selectedIndex;
    const select = document.getElementById( id );
    return select.options[ indexSelect ].text;
};

function selectHeading() {
    let new_arr_heading;
    document.getElementById( 'select_heading' ).addEventListener( 'change', e => {
        e.preventDefault();
        new_arr_heading = filterVal( getValueSelect( e.target.id ), blogList );
        if ( getValueSelect( e.target.id ) == 'Select topic' ) {
            renderList( blogList.slice( 0, 2 ), result, userLogged );
            pagination( blogList, userLogged );
            // liker( blogList.slice( 0, 2 ), userLogged );
            // comentator( blogList.slice( 0, 2 ), userLogged );
            // deleteComent( blogList.slice(0, 2), userLogged );
        } else {
            renderList( new_arr_heading, result, userLogged );
            pagination( new_arr_heading, userLogged );
            // liker( new_arr_heading, userLogged );
            // comentator( new_arr_heading, userLogged );
            // deleteComent( new_arr_heading, userLogged );
        }
    });
};selectHeading();

function selectTime() {
    document.getElementById( 'select_time' ).addEventListener( 'change', e => {
        e.preventDefault();
        const indexSelect = document.getElementById( 'select_heading' );
        const new_arr_time = filterVal( getValueSelect( indexSelect.id ), blogList );

        if ( getValueSelect( indexSelect.id ) == 'Select topic' ) {
            sortTime( blogList, getValueSelect( e.target.id ) );
            renderList( blogList.slice( 0, 2 ),result, userLogged );
            pagination( blogList, userLogged );
        } else {
            sortTime( new_arr_time, getValueSelect( e.target.id ) );
            renderList( new_arr_time, result ,userLogged );
            pagination( new_arr_time, userLogged )
        }
    });
};selectTime();

/*Add Coments*/
function comentator( list, user) {
    let article = [ ...document.querySelectorAll( 'div.coment-block > textarea' ) ];
    let comentBtn = [ ...document.querySelectorAll( 'button.coment-block__btn' ) ];
    let obj;
    
    comentBtn.forEach( ( el,i ) => {
        el.addEventListener( 'click', e => {
            e.preventDefault();
            let target = Number(e.target.name);
            if ( article[ i ].value == '' ) {
                alert( 'Before sending, fill in the comment field!' )
            } else if (  target  == list[ i ].number ) {
                obj = {
                    'id': list[ i ][ 'coments' ].length,
                    'user': user,
                    'page': article[ i ].value,
                }
                list[ i ][ 'coments' ].push( obj );
                localStorage.setItem('blogList', JSON.stringify(blogList));
                renderList( list, result, user );
            };
        });
    });
};
/*Create coment block*/
function createBlogBlock( list, el, user ) {
    list.forEach(obj =>{
    let new_block = document.createElement( 'div' ),
        time = document.createElement( 'p' ),
        linkWriter = document.createElement( 'a' ),
        title = document.createElement( 'h2' ),
        page = document.createElement( 'p' ),
        like = document.createElement( 'span' ),
        sentBlock = document.createElement( 'div' ),
        coment = document.createElement( 'div' ),
        link = document.createElement( 'a' ),
        forComent = document.createElement( 'textarea' ),
        btnComent = document.createElement( 'button' );
        new_block.className = 'result__render-article';
        time.className = 'time'
        like.className = obj.number;
        page.className = 'article'
        coment.className = 'coment-block';
        btnComent.className = 'coment-block__btn';
        sentBlock.className = 'article-block'
        forComent.name = obj.number;
        btnComent.name = obj.number;
        sentBlock.appendChild( title );
        sentBlock.appendChild(linkWriter);
        sentBlock.appendChild( time );
        sentBlock.appendChild( page );
        sentBlock.appendChild( like );
        new_block.appendChild( sentBlock );
        new_block.appendChild( coment );
        coment.appendChild( link );
        coment.appendChild( forComent );
        coment.appendChild( btnComent );
        forComent.placeholder = 'Coment please ...'
        linkWriter.innerHTML = obj.userPublicated;
        time.innerHTML = obj.time;
        title.innerHTML = obj.title;
        page.innerText = obj.page;
        link.innerHTML = user;
        like.innerText = obj.like;
        btnComent.innerHTML = 'To comment';
        el.appendChild( new_block );
        createComentBlock( obj, user, coment )
    });
};

function createComentBlock( obj, user, block ) {
    obj.coments.forEach( ( el,i ) => {
            listComent = document.createElement( 'div' );
            linkUser = document.createElement( 'a' );
            timeComent = document.createElement( 'span' );
            sentComent = document.createElement( 'p' );
            delComent = document.createElement( 'span' );
            listComent.className = 'coment-block__coment-user';
            sentComent.className = obj.number;
            sentComent.id = obj.coments[i].id;
            delComent.className = obj.number;
            delComent.id = obj.coments[i].id;
            listComent.appendChild(linkUser);
            listComent.appendChild(timeComent);
            listComent.appendChild(sentComent);
            listComent.appendChild( delComent );
            block.appendChild( listComent );
            timeComent.innerText = new Date().getFullYear() + '-' + new Date().getMonth()+1 + '-' + new Date().getDate()+ ' ' + new Date().getHours() + ':' + new Date().getMinutes()+ ':' + new Date().getSeconds();
            linkUser.innerHTML = el.user;
            sentComent.innerHTML = el.page;
            delComent.innerHTML = 'Delete';

    });
};
/*Delete coments*/
function deleteComent( arr, user ) {
    const delElements = [ ...document.querySelectorAll( 'div.coment-block__coment-user > span:last-child' ) ];
    let target,
        blogIndex,
        targetId;

    delElements.forEach( (el, i) => {
        el.onclick = ( e ) => {
            target = Number( e.target.className );
            blogIndex = blogList.findIndex( el => el.number == target );
            targetId = blogList[ target ].coments.findIndex( el => el.id == Number( e.target.id ) );
            blogList[ blogIndex ].coments.splice( targetId, 1 );
            localStorage.setItem('blogList', JSON.stringify(blogList));
            renderList( arr, result, user );
        };
    });
};
/*Filter blog*/
function filterVal( val,list ) {
    return list.filter( item => {
    if( item.topic.indexOf( val ) != -1 )
        return item;
    })
};
function regProcess( input, btn ) {
    const objUser = {};
    let boolean = false;
    let newUser;
    const regBlock = document.getElementById( 'header-block__registration' );
    btn.onclick = el => {
        if ( input[ 0 ].value !== '' && input[ 1 ].value !== '' && input[ 3 ].value !== '' && boolean == false ) {
            for( let i = 0; i < localStorage.length; i++ ) {
                if ( localStorage.key( i ) == input[ 0 ].value ) {
                    boolean = true;
                    alert( 'You are already registered!' );
                } else if ( localStorage.key( i ) == '' ) {
                    localStorage.removeItem( '' );
                } 
            };
            if ( boolean == false && input[ 1 ].value == input[ 2 ].value ) {
                newUser = input[ 0 ].value;
                input.forEach( el => objUser[ el.className ] = el.value );
                localStorage.setItem( newUser, JSON.stringify( objUser ) );
                alert( 'You have successfully registered!' );
                regBlock.style.display = 'none';
                localStorage.setItem( 'LogOn', JSON.stringify( newUser ) );
                stateStatus( true, newUser );
            } else if ( input[ 1 ].value !== input[ 2 ].value ){
                alert( 'Password fields do not match' );
            }
            input.forEach( el => el.value = '' );
        } else {
            input.forEach( el => el.value == '' ? el.placeholder = 'Incorrect filling' : el.value );
        };
    };
};

function signIn( button, input, signBlock, regBlock ) {
    let boolean = false;
    let objPars;
    button.onclick = () => {
        if ( input[ 0 ].value !== '' && input[ 1 ].value !== '' && boolean == false ) {
            for( let i = 0; i < localStorage.length; i++ ) {
                objPars = JSON.parse( localStorage[ localStorage.key( i ) ] );
                if ( localStorage.key( i ) == input[ 0 ].value && objPars.pass == input[ 1 ].value ) {
                    boolean = true;
                    userLogged = localStorage.key( i );
                    signBlock.style.display = 'none';
                    localStorage.setItem( 'LogOn', JSON.stringify( userLogged ) );
                    stateStatus ( true, userLogged );
                }
            }
            if ( boolean == false ) {
                alert('User not registered(')
                regBlock.style.display = 'block';
                signBlock.style.display = 'none';
            }
            input.forEach( el => el.value = '' );
        } else {
            input.forEach( el => el.value == '' ? el.placeholder = 'Fill field' : el.value );
        }
    }
};
/*Likes counter*/
function liker( list, user ) {
    let resultBlock = [ ...document.querySelectorAll( 'div#result > div.result__render-article > .article-block > span' ) ]
        .forEach( ( el, i ) => {
            el.addEventListener( 'click', e => {
            e.preventDefault();
            if ( Number( el.className ) == list[ i ].number ) {
                list[ i ].like++;
                localStorage.setItem('blogList', JSON.stringify(blogList));
                renderList( list, result, user);
            };
        });
    });
};
/*LogOff*/
function logOff() {
    const btnLogoBlock = [ ...document.querySelectorAll( 'div#header-block__logo > div > button' ) ];
    btnLogoBlock[ 2 ].onclick = ( e ) => {
        e.preventDefault();
        localStorage.removeItem( 'LogOn' );
        btnLogoBlock[ 2 ].style.display = 'none';
        btnLogoBlock[ 0 ].style.display = 'block';
        btnLogoBlock[ 1 ].style.display = 'block';
        localStorage.setItem( 'LogOn', JSON.stringify( null ) );
        stateStatus( false );
        registration();
    }
};
logOff();
/*Logo Slide*/
setTimeout( () => {
    const logo = [ ...document.querySelectorAll( 'div#header-block__logo > a > img' ) ];
    logo[ 0 ].style.left = '34%';
    logo[ 0 ].style.transition = '1.2s';
    logo[ 0 ].style.transform = 'rotate( 0deg )';
}, 1000 );

setTimeout( () => {
    const logo = [ ...document.querySelectorAll( 'div#header-block__logo > a > img' ) ];
    logo[ 1 ].style.left = '41%';
    logo[ 1 ].style.transition = '1.2s';
    logo[ 1 ].style.transform = 'rotate( 0deg )';
}, 1500 );

setTimeout( () => {
    const logo = [ ...document.querySelectorAll( 'div#header-block__logo > a > img' ) ];
    logo[ 2 ].style.left = '48%';
    logo[ 2 ].style.transition = '1.2s';
    logo[ 2 ].style.transform = 'rotate( 0deg )';
}, 2000 );

setTimeout( () => {
    const logo = [ ...document.querySelectorAll( 'div#header-block__logo > a > img' ) ];
    logo[ 3 ].style.left = '55%';
    logo[ 3 ].style.transition = '1.2s';
    logo[ 3 ].style.transform = 'rotate( 360deg )';
}, 2500 );
let userLogged = localStorage.getItem( 'LogOn' ) !== 'null' ? localStorage.getItem( 'LogOn' ).replace( /\"/g, "" ) : 'Anonim';


if( localStorage.getItem( 'LogOn') !== 'null' ) {
    let userFromLocal = localStorage.getItem( 'LogOn', JSON.stringify( userLogged ) );
    stateStatus( true, userFromLocal.replace( /\"/g, "" ) );
} else {
    localStorage.setItem( 'LogOn', JSON.stringify( null ) );
};

function stateStatus( state = false, user = 'Anonim' ) {
    const userName = document.getElementsByClassName( 'header-block__user-name' )[ 0 ];
    const main = document.querySelector( 'main' );

    registeredUser( user );
    if ( state == true ) {
        btnHide();
        pagination( blogList, user );
        renderList( blogList.slice( 0, 2 ), result, user );
    } else {
        main.style.display = 'none';
        userName.innerHTML = '';
    };
};

( () => {
    let bol = true;
    const menueBtn = document.getElementsByClassName( 'header-block__menue-button' )[ 0 ];
    const menue = document.getElementsByClassName( 'header-block__nav-menu-480-320' );
    menueBtn.onclick = function () {
        if ( bol == true ) {
            menue[ 0 ].style.display = 'block';
            menueBtn.style.zIndex = '5';
            bol = false;
        } else {
            menue[ 0 ].style.display = 'none';
            bol = true;
        }
    }
})();



// async function stateStatus( state = false, user = 'Anonim' ) {
//     let newArr = JSON.parse(localStorage.getItem('blogList'));
//     const userName = document.getElementsByClassName( 'header-block__user-name' )[ 0 ];
//     const main = document.querySelector( 'main' );
//     registeredUser( user );

//     if ( state == true ) {
//         btnHide();
//         pagination( blogList, user );
//         renderList( blogList.slice( 0, 2 ), result, user );
//     } else {
//         main.style.display = 'none';
//         userName.innerHTML = '';
//     } await newArr ;
// };

/* Pagination*/
function pagination( obj, user ) {
    let i = 1;
    let startPage = 0;
    let pugNum;
    let arrLink;
    const pageSize = Math.ceil( obj.length/2+1 );
    const mainBlock = document.querySelector( 'main' );
    const pugBlock = document.getElementById( 'pagination-block' );
          pugBlock.innerHTML = '';

    while( i < pageSize ) {
        pugNum = document.createElement( 'a' );
        pugNum.innerHTML = i;
        pugBlock.appendChild( pugNum );
        i++;
    };
    if (startPage == 0) {
        renderList(obj.slice(startPage, startPage+2) ,result, user);
    }
    arrLink = [ ...pugBlock.querySelectorAll( 'a' ) ];

    arrLink.forEach( link => {
        link.addEventListener( 'click', e => {
            e.preventDefault();
            startPage = Number( e.target.text );
            renderList( obj.slice( startPage*2-2, startPage*2 ), result, user );
        });
    });
};
/*Add new article*/
function publickArticle( user ) {
    const pushBtn = document.getElementById( 'push_article' );
    const newTitle = document.getElementById( 'add-article__title' );
    const newPage = document.getElementById( 'add-article__page' );
    const selectValue = document.getElementById( 'select_heading' );
    let indexSelect = document.getElementById( 'add-article__select_heading' );
    const select = document.getElementById( 'add-article__select_heading' );
    let addInTopic = filterVal( getValueSelect( selectValue.id ), blogList );
    const newArticle = {
        'number': blogList.length,
        'userPublicated': user,
        'topic': select.options[ indexSelect.options.selectedIndex ].text,
        'title': newTitle.value,
        'time': new Date().getFullYear() + '-' + new Date().getMonth()+1 + '-' + new Date().getDate()+ ' ' + new Date().getHours() + ':' + new Date().getMinutes()+ ':' + new Date().getSeconds(),
        'like': 0,
        'coments': [],
        'page': newPage.value,
    };
    blogList.unshift( newArticle );
    localStorage.setItem('blogList', JSON.stringify(blogList));
    if ( newArticle[ 'topic' ] == getValueSelect( selectValue.id ) ) {
        newTitle.value = '';
        newPage.value = '';
        indexSelect.options.selectedIndex = 0;
        renderList( addInTopic, result, user );
        pagination( addInTopic, user );
    } else if ( getValueSelect( selectValue.id ) == 'Select topic' ) {
        newTitle.value = '';
        newPage.value = '';
        indexSelect.options.selectedIndex = 0;
        renderList( blogList,result, user );
        pagination( blogList, user );
    };

    pushBtn.style.height = '10px'
    pushBtn.style.fontSize = '0'
    pushBtn.style.transition = '1s'
};
document.getElementById( 'push_article' ).onclick = () => publickArticle( userLogged, blogList );
/*Edit coments*/
function editComent( obj, user ) {
    const createElements = [ ...document.querySelectorAll( 'div.coment-block__coment-user' ) ];
    const innerElements = [ ...document.querySelectorAll( '.coment-block__coment-user > p:nth-child(2)' ) ];
    const pageClass = [ ...document.querySelectorAll( '.coment-block__coment-user > span:last-child' ) ];
    let inputRefresh;
    let textCreate;
    let target;

    innerElements.forEach( ( el,i ) => {
        el.onclick = ( e ) => {
            inputRefresh = document.createElement( 'button' );
            textCreate = document.createElement( 'textarea' );
            inputRefresh.className = pageClass[ i ].className;
            inputRefresh.id = pageClass[ i ].id;
            textCreate.value = innerElements[ i ].innerHTML;
            inputRefresh.innerText = 'Refresh';
            createElements[ i ].appendChild(textCreate);
            createElements[ i ].appendChild( inputRefresh )
                inputRefresh.onclick = ( e ) => {
                    target = e.target;
                    blogList.forEach( ( el, i ) => {
                    if ( blogList[ i ].number == target.className && blogList[ i ].coments[ target.id ].user == user ) {
                        blogList[ i ].coments[ target.id ].page = textCreate.value;
                        inputRefresh.style.display = 'none';
                        textCreate.style.display = 'none';
                        localStorage.setItem('blogList', JSON.stringify(blogList));
                        renderList( obj, result, user );
                    } else {
                        inputRefresh.style.display = 'none';
                        textCreate.style.display = 'none';
                    };
                });
            };
        };
    });
};
/*Registered user*/
function registeredUser( user ) {
    const userName = document.getElementsByClassName( 'header-block__user-name' )[ 0 ];
    const main = document.querySelector( 'main' );
    userName.innerHTML = user;
    userName.style.display = 'block';
    userName.style.top = '5px';
    userName.style.left = '35%';
    userName.style.transition = '1.2s'
    main.style.display = 'block';
};
/*Registration*/
function registration() {
    const logoBtn = [ ...document.querySelectorAll( 'div#header-block__logo > div > button' ) ];
    const regBlock = document.getElementById( 'header-block__registration' );
    const regBtn = regBlock.querySelector( 'button' );
    const signBlock = document.getElementById( 'header-block__sign' );
    const signBtn = signBlock.querySelector( 'button' );
    const regInput = [ ...document.querySelectorAll( 'div#header-block__registration > input' ) ];
    const signInput = [ ...document.querySelectorAll( 'div#header-block__sign > input' ) ];

    logoBtn[ 1 ].onclick = () => {
        signBlock.style.display = 'none';
        regBlock.style.display = 'block';
    }
    logoBtn[ 0 ].onclick = () => {
        signBlock.style.display = 'block';
        regBlock.style.display = 'none';
    }
    regProcess( regInput, regBtn );
    signIn( signBtn, signInput, signBlock, regBlock );
};
registration();
/*Render blog*/
// const result  = document.getElementById( 'result' );
function renderList( list, el, user ){
    el.innerHTML='';
    createBlogBlock( list, el, user )
    liker( list, user );
   	comentator( list, user );
    deleteComent( list, user );
    editComent( list, user );
};
/* Search on site*/
document.querySelector('#search').oninput = function search() {
    let val = this.value.trim();
    let arrSearch = blogList.filter( el => { 
        return el.page.search(val) !== -1;
    });
    renderList( arrSearch, result, userLogged);
    pagination( arrSearch, userLogged );
};


/*Sort time*/
function sortTime( list, time ) {
    if ( time == 'The newest' ) {
        return list.sort( ( a,b ) => new Date( b.time ).getTime() - new Date( a.time ).getTime() );
    } else if ( time == 'The old' ) {
        return list.sort( ( a,b ) => new Date( a.time ).getTime() - new Date( b.time ).getTime())
    } else if ( time == 'Popular') {
        return list.sort( ( a,b ) => b.like - a.like );
    } else if ( time == 'Unpopular' ) {
        return list.sort( (a,b) => a.like - b.like );
    }
};